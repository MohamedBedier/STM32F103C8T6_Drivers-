
Traffic_Light_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb8  08000cb8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb8  08000cb8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb8  08000cb8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000005c  08000d1c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000d1c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a47  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000683  00000000  00000000  00021b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00022198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011f  00000000  00000000  00022320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000160e  00000000  00000000  0002243f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000235a  00000000  00000000  00023a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000542c  00000000  00000000  00025da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000047c  00000000  00000000  0002b1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0002b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c98 	.word	0x08000c98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000c98 	.word	0x08000c98

08000170 <GPIO_u8PinInit>:
 * @param[in] PinConfig : the initialization value of the pin
 * @retval Local_u8ErrorState
 */

uint8_t  GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	/* define error state variable */
	uint8_t Local_u8ErrorState=OK;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]

	/* check on pointer not equal NULL */
	if(PinConfig != NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 80ce 	beq.w	8000320 <GPIO_u8PinInit+0x1b0>
	{
		/* protect our program by : make a condition to save our program from passing any error values from user */
		if((PinConfig->Port >= PORTA) && (PinConfig->Port <= PORTG) && (PinConfig->PinNum <= PIN15) && (PinConfig->PinNum >= PIN0))
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b06      	cmp	r3, #6
 800018a:	f200 80c6 	bhi.w	800031a <GPIO_u8PinInit+0x1aa>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	785b      	ldrb	r3, [r3, #1]
 8000192:	2b0f      	cmp	r3, #15
 8000194:	f200 80c1 	bhi.w	800031a <GPIO_u8PinInit+0x1aa>
		{
			/* this variable to determine which register work on it and our result in range [0,1] : 0 refer to Low register and 1  refer to high register */
			uint8_t Local_u8RegNum =(PinConfig->PinNum) / CR_PIN_SHIFTING;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	785b      	ldrb	r3, [r3, #1]
 800019c:	08db      	lsrs	r3, r3, #3
 800019e:	73bb      	strb	r3, [r7, #14]

			/* this variable to determine which pin work on it and our result in range [0,15]  refers to our 15 pins  */
			uint8_t Local_u8BitNum =(PinConfig->PinNum) % CR_PIN_SHIFTING;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	785b      	ldrb	r3, [r3, #1]
 80001a4:	f003 0307 	and.w	r3, r3, #7
 80001a8:	737b      	strb	r3, [r7, #13]

			/* Select GPIO mode : Input , Output with 10MHZ , Output with 2MHZ , Output with 50MHZ  */
			((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  &= ~(MODE_MASK << (Local_u8BitNum  * MODE_PIN_ACCESS)));/* clear the MODE bits */
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b5f      	ldr	r3, [pc, #380]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80001b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001b6:	7bba      	ldrb	r2, [r7, #14]
 80001b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80001bc:	7b7b      	ldrb	r3, [r7, #13]
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	2203      	movs	r2, #3
 80001c2:	fa02 f303 	lsl.w	r3, r2, r3
 80001c6:	43db      	mvns	r3, r3
 80001c8:	4618      	mov	r0, r3
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	4b57      	ldr	r3, [pc, #348]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80001d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001d6:	7bba      	ldrb	r2, [r7, #14]
 80001d8:	4001      	ands	r1, r0
 80001da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  |= ((PinConfig->Mode) << (Local_u8BitNum  * MODE_PIN_ACCESS)));/* SET the MODE bits */
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b52      	ldr	r3, [pc, #328]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80001e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001ea:	7bba      	ldrb	r2, [r7, #14]
 80001ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	789b      	ldrb	r3, [r3, #2]
 80001f4:	461a      	mov	r2, r3
 80001f6:	7b7b      	ldrb	r3, [r7, #13]
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	fa02 f303 	lsl.w	r3, r2, r3
 80001fe:	4618      	mov	r0, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b4a      	ldr	r3, [pc, #296]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 8000208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800020c:	7bba      	ldrb	r2, [r7, #14]
 800020e:	4301      	orrs	r1, r0
 8000210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			/* check on mode of pin is input or output[MAXSPEED_10MHZ , MAXSPEED_2MHZ, MAXSPEED_50MHZ] */
			if((PinConfig->Mode)== INPUT)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789b      	ldrb	r3, [r3, #2]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d137      	bne.n	800028c <GPIO_u8PinInit+0x11c>
			{
				/* Select GPIO CNF if mode is INPUT : Analog mode ,  Floating input , Input with pull-up / pull-down  */
				((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  &= ~(CNF_MASK << (Local_u8BitNum  * CNF_SHIFTING_PIN_ACCESS + CNF_PIN_ACCESS)));/* clear the CNF INPUT bits */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	461a      	mov	r2, r3
 8000222:	4b43      	ldr	r3, [pc, #268]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 8000224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000228:	7bba      	ldrb	r2, [r7, #14]
 800022a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800022e:	7b7b      	ldrb	r3, [r7, #13]
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	3302      	adds	r3, #2
 8000234:	2203      	movs	r2, #3
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	43db      	mvns	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 8000246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800024a:	7bba      	ldrb	r2, [r7, #14]
 800024c:	4001      	ands	r1, r0
 800024e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  |= ((PinConfig->CNF_InputMode) << (Local_u8BitNum  * CNF_SHIFTING_PIN_ACCESS + CNF_PIN_ACCESS)));/* SET the CNF INPUT bits */
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	461a      	mov	r2, r3
 8000258:	4b35      	ldr	r3, [pc, #212]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 800025a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800025e:	7bba      	ldrb	r2, [r7, #14]
 8000260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	78db      	ldrb	r3, [r3, #3]
 8000268:	461a      	mov	r2, r3
 800026a:	7b7b      	ldrb	r3, [r7, #13]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	3302      	adds	r3, #2
 8000270:	fa02 f303 	lsl.w	r3, r2, r3
 8000274:	4618      	mov	r0, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 800027e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000282:	7bba      	ldrb	r2, [r7, #14]
 8000284:	4301      	orrs	r1, r0
 8000286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 800028a:	e04b      	b.n	8000324 <GPIO_u8PinInit+0x1b4>

			}else if(((PinConfig->Mode)== OUTPUT_MAXSPEED_10MHZ )|| ((PinConfig->Mode)== OUTPUT_MAXSPEED_2MHZ ) || ((PinConfig->Mode)== OUTPUT_MAXSPEED_50MHZ ))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	789b      	ldrb	r3, [r3, #2]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d007      	beq.n	80002a4 <GPIO_u8PinInit+0x134>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	789b      	ldrb	r3, [r3, #2]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d003      	beq.n	80002a4 <GPIO_u8PinInit+0x134>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d137      	bne.n	8000314 <GPIO_u8PinInit+0x1a4>
			{
				/* Select GPIO CNF OUTPUT :  PUSH_PULL ,  OPEN_DRAIN input , ALT_FUNC_PUSH_PULL , ALT_FUNC_OPEN_DRAIN*/
				((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  &= ~(CNF_MASK << (Local_u8BitNum  * CNF_SHIFTING_PIN_ACCESS + CNF_PIN_ACCESS)));/* clear the CNF OUTPUT bits */
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80002ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b0:	7bba      	ldrb	r2, [r7, #14]
 80002b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002b6:	7b7b      	ldrb	r3, [r7, #13]
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	3302      	adds	r3, #2
 80002bc:	2203      	movs	r2, #3
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	43db      	mvns	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80002ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002d2:	7bba      	ldrb	r2, [r7, #14]
 80002d4:	4001      	ands	r1, r0
 80002d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				((GPIOPORT[PinConfig->Port] -> CR[Local_u8RegNum])  |= ((PinConfig->CNF_OutputMode) << (Local_u8BitNum  * CNF_SHIFTING_PIN_ACCESS + CNF_PIN_ACCESS)));/* SET the CNF OUTPUT bits */
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 80002e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002e6:	7bba      	ldrb	r2, [r7, #14]
 80002e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	791b      	ldrb	r3, [r3, #4]
 80002f0:	461a      	mov	r2, r3
 80002f2:	7b7b      	ldrb	r3, [r7, #13]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3302      	adds	r3, #2
 80002f8:	fa02 f303 	lsl.w	r3, r2, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <GPIO_u8PinInit+0x1c0>)
 8000306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030a:	7bba      	ldrb	r2, [r7, #14]
 800030c:	4301      	orrs	r1, r0
 800030e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8000312:	e007      	b.n	8000324 <GPIO_u8PinInit+0x1b4>

			}else
			{
				/* update error state */
				Local_u8ErrorState=NOK;
 8000314:	2301      	movs	r3, #1
 8000316:	73fb      	strb	r3, [r7, #15]
		{
 8000318:	e004      	b.n	8000324 <GPIO_u8PinInit+0x1b4>
			}
		}else
		{
			/* update error state */
			Local_u8ErrorState=NOK;
 800031a:	2301      	movs	r3, #1
 800031c:	73fb      	strb	r3, [r7, #15]
 800031e:	e001      	b.n	8000324 <GPIO_u8PinInit+0x1b4>
		}

	}else
	{
		/* pointer equal NULL update error state */
		Local_u8ErrorState=NULL_PTR_ERR;
 8000320:	2302      	movs	r3, #2
 8000322:	73fb      	strb	r3, [r7, #15]
	}

	/* return error state variable and end function */
	return Local_u8ErrorState;
 8000324:	7bfb      	ldrb	r3, [r7, #15]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000000 	.word	0x20000000

08000334 <GPIO_u8SetPinValue>:
 *   @param[in]  PinNum: The pin number, get options @pin_t enum
 *   @param[in]  PinVal: The output value, get options @PinVal_t enum
 *   @retVal     Local_u8ErrorState
 */
uint8_t  GPIO_u8SetPinValue(Port_t Port , Pin_t PinNum ,PinVal_t PinVal)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
 800033e:	460b      	mov	r3, r1
 8000340:	71bb      	strb	r3, [r7, #6]
 8000342:	4613      	mov	r3, r2
 8000344:	717b      	strb	r3, [r7, #5]
	/* define error state variable */
	uint8_t Local_u8ErrorState=OK;
 8000346:	2300      	movs	r3, #0
 8000348:	73fb      	strb	r3, [r7, #15]

	/* protect our program by : make a condition to save our program from passing any error values from user */
	if((Port >= PORTA) && (Port <= PORTG) && (PinNum <= PIN15) && (PinNum >= PIN0))
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b06      	cmp	r3, #6
 800034e:	d82b      	bhi.n	80003a8 <GPIO_u8SetPinValue+0x74>
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b0f      	cmp	r3, #15
 8000354:	d828      	bhi.n	80003a8 <GPIO_u8SetPinValue+0x74>
	{
		if(PinVal == PIN_LOW)
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d110      	bne.n	800037e <GPIO_u8SetPinValue+0x4a>
		{
			/* put in PinNum in ODR  0 */
			GPIOPORT[Port]->ODR &= ~(ODR_MASK<< PinNum );
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <GPIO_u8SetPinValue+0x84>)
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	68d9      	ldr	r1, [r3, #12]
 8000366:	79bb      	ldrb	r3, [r7, #6]
 8000368:	2201      	movs	r2, #1
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	43da      	mvns	r2, r3
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4811      	ldr	r0, [pc, #68]	; (80003b8 <GPIO_u8SetPinValue+0x84>)
 8000374:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000378:	400a      	ands	r2, r1
 800037a:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 800037c:	e016      	b.n	80003ac <GPIO_u8SetPinValue+0x78>
			/* another method and it is faster than method one bec it is an assignment operation only */
			/* GPIOPORT[Port]->BSRR = ODR_MASK << (16 + PinNum); */

		}else if(PinVal == PIN_HIGH)
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10e      	bne.n	80003a2 <GPIO_u8SetPinValue+0x6e>
		{
			/* put in  PinNum in ODR 1 */
			GPIOPORT[Port]->ODR |= (ODR_MASK<< PinNum );
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <GPIO_u8SetPinValue+0x84>)
 8000388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038c:	68d9      	ldr	r1, [r3, #12]
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	2201      	movs	r2, #1
 8000392:	409a      	lsls	r2, r3
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <GPIO_u8SetPinValue+0x84>)
 8000398:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800039c:	430a      	orrs	r2, r1
 800039e:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 80003a0:	e004      	b.n	80003ac <GPIO_u8SetPinValue+0x78>
			/* another method and it is faster than method one bec it is an assignment operation only */
			/* GPIOPORT[Port]->BSRR = 1 << PinNum; */
		}else
		{
			/* update error state */
			Local_u8ErrorState=NOK;
 80003a2:	2301      	movs	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
		if(PinVal == PIN_LOW)
 80003a6:	e001      	b.n	80003ac <GPIO_u8SetPinValue+0x78>
		}

	}else
	{
		/* update error state */
		Local_u8ErrorState=NOK;
 80003a8:	2301      	movs	r3, #1
 80003aa:	73fb      	strb	r3, [r7, #15]
	}

	/* return error state variable and end function */
	return Local_u8ErrorState;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000000 	.word	0x20000000

080003bc <LED_u8PinInit>:
 * @brief: this a function to initiate LED Pin configuration its [PORT , PinNum , Mode , CNF_Output]
 * @param[in] PinConfig :this is a pointer from PinConfig_t struct which carry PinConfiguration
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t LED_u8PinInit(PinConfig_t *PinConfig)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState =OK;
 80003c4:	2300      	movs	r3, #0
 80003c6:	73fb      	strb	r3, [r7, #15]

	/* check on pointer 'SSD_Configuration' if not refer to NULL  */
	if(PinConfig !=NULL)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <LED_u8PinInit+0x1a>
	{
		/* set Direction of SSD Pins */
		GPIO_u8PinInit(PinConfig);
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f7ff fece 	bl	8000170 <GPIO_u8PinInit>
 80003d4:	e001      	b.n	80003da <LED_u8PinInit+0x1e>
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState =NULL_PTR_ERR;
 80003d6:	2302      	movs	r3, #2
 80003d8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LED_u8LedTurnON>:
 * @brief: this a function to Turn Led ON
 * @param[in] puFrom_LED_Struct : pointer from LED_Struct to configure led port and pin and connection type
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t  LED_u8LedTurnON(LED_Struct *puFrom_LED_Struct)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState = OK;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]

	/* check on pointer 'puFrom_LED_Struct' if not refer to NULL  */
	if(puFrom_LED_Struct != NULL)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d01c      	beq.n	8000430 <LED_u8LedTurnON+0x4c>
	{
		/* Check on Led connection  SOURCE_CONNECTION or SINK_CONNECTION */
		if((puFrom_LED_Struct -> LED_u8ConnectionType) == SOURCE_CONNECTION)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d108      	bne.n	8000410 <LED_u8LedTurnON+0x2c>
		{
			/* set as SOURCE_CONNECTION (power from MC) */
			GPIO_u8SetPinValue((puFrom_LED_Struct -> LED_u8PORT) , (puFrom_LED_Struct -> LED_u8PIN) ,PIN_HIGH);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	7858      	ldrb	r0, [r3, #1]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2201      	movs	r2, #1
 8000408:	4619      	mov	r1, r3
 800040a:	f7ff ff93 	bl	8000334 <GPIO_u8SetPinValue>
 800040e:	e011      	b.n	8000434 <LED_u8LedTurnON+0x50>

		}else if (puFrom_LED_Struct -> LED_u8ConnectionType == SINK_CONNECTION)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d108      	bne.n	800042a <LED_u8LedTurnON+0x46>
		{
			/* set as SOURCE_CONNECTION (power from external component) */
			GPIO_u8SetPinValue((puFrom_LED_Struct -> LED_u8PORT) , (puFrom_LED_Struct -> LED_u8PIN) , PIN_LOW);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7858      	ldrb	r0, [r3, #1]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	2200      	movs	r2, #0
 8000422:	4619      	mov	r1, r3
 8000424:	f7ff ff86 	bl	8000334 <GPIO_u8SetPinValue>
 8000428:	e004      	b.n	8000434 <LED_u8LedTurnON+0x50>

		}else
		{
			/* Update Local_u8ErrorState */
			Local_u8ErrorState =NOK;
 800042a:	2301      	movs	r3, #1
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e001      	b.n	8000434 <LED_u8LedTurnON+0x50>
		}
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState = NULL_PTR_ERR;
 8000430:	2302      	movs	r3, #2
 8000432:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState ;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <LED_u8LedTurnOff>:
 * @brief: this a function to Turn Led off
 * @param[in] puFrom_LED_Struct : pointer from LED_Struct to configure led port and pin and connection type
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t  LED_u8LedTurnOff(LED_Struct *puFrom_LED_Struct)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState = OK;
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]

	/* check on pointer 'puFrom_LED_Struct' if not refer to NULL  */
	if(puFrom_LED_Struct != NULL)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d01c      	beq.n	800048a <LED_u8LedTurnOff+0x4c>
	{
		/* Check on Led connection  SOURCE_CONNECTION or SINK_CONNECTION */
		if((puFrom_LED_Struct -> LED_u8ConnectionType) == SOURCE_CONNECTION)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d108      	bne.n	800046a <LED_u8LedTurnOff+0x2c>
		{
			/* set as SOURCE_CONNECTION (power from MC) */
			GPIO_u8SetPinValue((puFrom_LED_Struct -> LED_u8PORT) , (puFrom_LED_Struct -> LED_u8PIN) ,PIN_LOW );
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7858      	ldrb	r0, [r3, #1]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	789b      	ldrb	r3, [r3, #2]
 8000460:	2200      	movs	r2, #0
 8000462:	4619      	mov	r1, r3
 8000464:	f7ff ff66 	bl	8000334 <GPIO_u8SetPinValue>
 8000468:	e011      	b.n	800048e <LED_u8LedTurnOff+0x50>

		}else if (puFrom_LED_Struct -> LED_u8ConnectionType == SINK_CONNECTION)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d108      	bne.n	8000484 <LED_u8LedTurnOff+0x46>
		{
			/* set as SOURCE_CONNECTION (power from external component) */
			GPIO_u8SetPinValue((puFrom_LED_Struct -> LED_u8PORT) , (puFrom_LED_Struct -> LED_u8PIN) ,PIN_HIGH );
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7858      	ldrb	r0, [r3, #1]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	789b      	ldrb	r3, [r3, #2]
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	f7ff ff59 	bl	8000334 <GPIO_u8SetPinValue>
 8000482:	e004      	b.n	800048e <LED_u8LedTurnOff+0x50>

		}else
		{
			/* Update Local_u8ErrorState */
			Local_u8ErrorState =NOK;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e001      	b.n	800048e <LED_u8LedTurnOff+0x50>
		}
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState = NULL_PTR_ERR;
 800048a:	2302      	movs	r3, #2
 800048c:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState ;
 800048e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <RCC_voidAPB_2_EnableClk>:
 * @brief this function to ENABLE peripheral clk on APB_2
 * @param Copy_EnumAHBPeripheral
 *
 */
void RCC_voidAPB_2_EnableClk(RCC_APB_2_ENR_t  Copy_EnumAPB_2_Peripheral)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	/* enable the clk on this peripheral */
	SET_BIT((RCC->RCC_APB2ENR),Copy_EnumAPB_2_Peripheral);
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <RCC_voidAPB_2_EnableClk+0x2c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	699a      	ldr	r2, [r3, #24]
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2101      	movs	r1, #1
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <RCC_voidAPB_2_EnableClk+0x2c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	430a      	orrs	r2, r1
 80004b8:	619a      	str	r2, [r3, #24]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	2000001c 	.word	0x2000001c

080004c8 <SSD_u8PinInit>:
 * @brief: this a function to initiate SSD Pin configuration its [PORT , PinNum , Mode , CNF_Output]
 * @param[in] PinConfig :this is a pointer from PinConfig_t struct which carry PinConfiguration
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t SSD_u8PinInit(PinConfig_t *PinConfig)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState =OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]

	/* check on pointer 'SSD_Configuration' if not refer to NULL  */
	if(PinConfig !=NULL)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d003      	beq.n	80004e2 <SSD_u8PinInit+0x1a>
	{
		/* set Direction of SSD Pins */
		GPIO_u8PinInit(PinConfig);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff fe48 	bl	8000170 <GPIO_u8PinInit>
 80004e0:	e001      	b.n	80004e6 <SSD_u8PinInit+0x1e>
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState =NULL_PTR_ERR;
 80004e2:	2302      	movs	r3, #2
 80004e4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SSD_u8DisplayOn>:
 * @param[in] Copy_u8SSDNum : to configure which SSD work on it
 * @param[in] Copy_u8SSDType : to configure SSD type Common cathode or anode
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t SSD_u8DisplayOn(uint8_t Copy_u8SSDNum , uint8_t Copy_u8SSDType)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState =OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

	/* check on Copy_u8SSDNum Boundaries >= 1 At least one SSD in the project, and max  NUM_OF_SSD_IN_PROJECT  */
	if((Copy_u8SSDNum >= ONE_VALUE) && (Copy_u8SSDNum <= NUM_OF_SSD_IN_PROJECT))
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d025      	beq.n	8000556 <SSD_u8DisplayOn+0x66>
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d822      	bhi.n	8000556 <SSD_u8DisplayOn+0x66>
	{
		/* check on SSD_TYPE [SSD_COMMON_ANODE,SSD_COMMON_CATHODE]  */
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d10c      	bne.n	8000530 <SSD_u8DisplayOn+0x40>
		{
			/* Set common pin as low because SSD is SSD_COMMON_CATHODE  */
			GPIO_u8SetPinValue(SSD_EN_PORT[Copy_u8SSDNum - ONE_VALUE],SSD_EN_PIN[Copy_u8SSDNum - ONE_VALUE] , PIN_LOW);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	3b01      	subs	r3, #1
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <SSD_u8DisplayOn+0x74>)
 800051c:	5cd0      	ldrb	r0, [r2, r3]
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <SSD_u8DisplayOn+0x78>)
 8000524:	5cd3      	ldrb	r3, [r2, r3]
 8000526:	2200      	movs	r2, #0
 8000528:	4619      	mov	r1, r3
 800052a:	f7ff ff03 	bl	8000334 <GPIO_u8SetPinValue>
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 800052e:	e014      	b.n	800055a <SSD_u8DisplayOn+0x6a>
		}else if (Copy_u8SSDType == SSD_COMMON_ANODE)
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10c      	bne.n	8000550 <SSD_u8DisplayOn+0x60>
		{
			/* Set common pin as high because SSD is SSD_COMMON_ANODE  */
			GPIO_u8SetPinValue(SSD_EN_PORT[Copy_u8SSDNum - ONE_VALUE],SSD_EN_PIN[Copy_u8SSDNum - ONE_VALUE] , PIN_HIGH);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3b01      	subs	r3, #1
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <SSD_u8DisplayOn+0x74>)
 800053c:	5cd0      	ldrb	r0, [r2, r3]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <SSD_u8DisplayOn+0x78>)
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	f7ff fef3 	bl	8000334 <GPIO_u8SetPinValue>
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 800054e:	e004      	b.n	800055a <SSD_u8DisplayOn+0x6a>
		}else
		{
			/* Update Local_u8ErrorState */
			Local_u8ErrorState =NOK;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 8000554:	e001      	b.n	800055a <SSD_u8DisplayOn+0x6a>
		}
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState =NOK;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000050 	.word	0x20000050
 8000568:	20000054 	.word	0x20000054

0800056c <SSD_u8DisplayOFF>:
 * @param[in] Copy_u8SSDNum : to configure which SSD work on it
 * @param[in] Copy_u8SSDType : to configure SSD type Common cathode or anode
 * @retval : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t SSD_u8DisplayOFF(uint8_t Copy_u8SSDNum , uint8_t Copy_u8SSDType)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState =OK;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]

	/* check on Copy_u8SSDNum Boundaries >= 1 At least one SSD in the project, and max  NUM_OF_SSD_IN_PROJECT  */
	if((Copy_u8SSDNum >= ONE_VALUE) && (Copy_u8SSDNum <= NUM_OF_SSD_IN_PROJECT))
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d025      	beq.n	80005d2 <SSD_u8DisplayOFF+0x66>
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d822      	bhi.n	80005d2 <SSD_u8DisplayOFF+0x66>
	{
		/* check on SSD_TYPE [SSD_COMMON_ANODE,SSD_COMMON_CATHODE]  */
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d10c      	bne.n	80005ac <SSD_u8DisplayOFF+0x40>
		{
			/* Set common pin as low because SSD is SSD_COMMON_CATHODE  */
			GPIO_u8SetPinValue(SSD_EN_PORT[Copy_u8SSDNum - ONE_VALUE],SSD_EN_PIN[Copy_u8SSDNum - ONE_VALUE] , PIN_HIGH);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <SSD_u8DisplayOFF+0x74>)
 8000598:	5cd0      	ldrb	r0, [r2, r3]
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	3b01      	subs	r3, #1
 800059e:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <SSD_u8DisplayOFF+0x78>)
 80005a0:	5cd3      	ldrb	r3, [r2, r3]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	f7ff fec5 	bl	8000334 <GPIO_u8SetPinValue>
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 80005aa:	e014      	b.n	80005d6 <SSD_u8DisplayOFF+0x6a>
		}else if (Copy_u8SSDType == SSD_COMMON_ANODE)
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d10c      	bne.n	80005cc <SSD_u8DisplayOFF+0x60>
		{
			/* Set common pin as high because SSD is SSD_COMMON_ANODE  */
			GPIO_u8SetPinValue(SSD_EN_PORT[Copy_u8SSDNum - ONE_VALUE],SSD_EN_PIN[Copy_u8SSDNum - ONE_VALUE] ,PIN_LOW );
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <SSD_u8DisplayOFF+0x74>)
 80005b8:	5cd0      	ldrb	r0, [r2, r3]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	3b01      	subs	r3, #1
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <SSD_u8DisplayOFF+0x78>)
 80005c0:	5cd3      	ldrb	r3, [r2, r3]
 80005c2:	2200      	movs	r2, #0
 80005c4:	4619      	mov	r1, r3
 80005c6:	f7ff feb5 	bl	8000334 <GPIO_u8SetPinValue>
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 80005ca:	e004      	b.n	80005d6 <SSD_u8DisplayOFF+0x6a>
		}else
		{
			/* Update Local_u8ErrorState */
			Local_u8ErrorState =NOK;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
		if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 80005d0:	e001      	b.n	80005d6 <SSD_u8DisplayOFF+0x6a>
		}
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState =NOK;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000050 	.word	0x20000050
 80005e4:	20000054 	.word	0x20000054

080005e8 <SSD_u8DisplayNumber>:
 * @param[in] Copy_u8SSDNum: this is a variable to carry which SSD you want to work on it
 * @param[in] Copy_u8Number
 * @return : Local_u8ErrorState : This is a variable to carry ErrorState value
 */
uint8_t SSD_u8DisplayNumber( uint8_t Copy_u8SSDNum , uint8_t Copy_u8SSDType, uint8_t Copy_u8Number )
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]
	/* Define a variable to carry which SSD you want to work on it */
	uint8_t Local_u8SSDCounter = INIT_VALUE_BY_ZERO ;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
	/* define a variable to carry ErrorState value */
	uint8_t Local_u8ErrorState = OK ;
 80005fe:	2300      	movs	r3, #0
 8000600:	73bb      	strb	r3, [r7, #14]


	/* check on SSD_TYPE [SSD_COMMON_ANODE,SSD_COMMON_CATHODE]  */
	if(Copy_u8SSDType == SSD_COMMON_CATHODE)
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d17e      	bne.n	8000706 <SSD_u8DisplayNumber+0x11e>
	{
		/* Enable Common of the SSD  you want to work on it */
		switch( Copy_u8SSDNum )
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d038      	beq.n	8000680 <SSD_u8DisplayNumber+0x98>
 800060e:	2b03      	cmp	r3, #3
 8000610:	dc4f      	bgt.n	80006b2 <SSD_u8DisplayNumber+0xca>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d002      	beq.n	800061c <SSD_u8DisplayNumber+0x34>
 8000616:	2b02      	cmp	r3, #2
 8000618:	d019      	beq.n	800064e <SSD_u8DisplayNumber+0x66>
 800061a:	e04a      	b.n	80006b2 <SSD_u8DisplayNumber+0xca>
		{
		case 1 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_HIGH ) ;
 800061c:	4b80      	ldr	r3, [pc, #512]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4a80      	ldr	r2, [pc, #512]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000622:	7811      	ldrb	r1, [r2, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fe84 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_LOW ) ;
 800062c:	4b7c      	ldr	r3, [pc, #496]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	4a7c      	ldr	r2, [pc, #496]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000632:	7851      	ldrb	r1, [r2, #1]
 8000634:	2200      	movs	r2, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fe7c 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_LOW ) ;
 800063c:	4b78      	ldr	r3, [pc, #480]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	4a78      	ldr	r2, [pc, #480]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000642:	7891      	ldrb	r1, [r2, #2]
 8000644:	2200      	movs	r2, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe74 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 800064c:	e034      	b.n	80006b8 <SSD_u8DisplayNumber+0xd0>
		case 2 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_LOW ) ;
 800064e:	4b74      	ldr	r3, [pc, #464]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4a74      	ldr	r2, [pc, #464]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000654:	7811      	ldrb	r1, [r2, #0]
 8000656:	2200      	movs	r2, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe6b 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_HIGH ) ;
 800065e:	4b70      	ldr	r3, [pc, #448]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	4a70      	ldr	r2, [pc, #448]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000664:	7851      	ldrb	r1, [r2, #1]
 8000666:	2201      	movs	r2, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe63 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_LOW ) ;
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	4a6c      	ldr	r2, [pc, #432]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000674:	7891      	ldrb	r1, [r2, #2]
 8000676:	2200      	movs	r2, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe5b 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 800067e:	e01b      	b.n	80006b8 <SSD_u8DisplayNumber+0xd0>
		case 3 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_LOW ) ;
 8000680:	4b67      	ldr	r3, [pc, #412]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4a67      	ldr	r2, [pc, #412]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000686:	7811      	ldrb	r1, [r2, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fe52 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_LOW ) ;
 8000690:	4b63      	ldr	r3, [pc, #396]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	4a63      	ldr	r2, [pc, #396]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000696:	7851      	ldrb	r1, [r2, #1]
 8000698:	2200      	movs	r2, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fe4a 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_HIGH ) ;
 80006a0:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	4a5f      	ldr	r2, [pc, #380]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 80006a6:	7891      	ldrb	r1, [r2, #2]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe42 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 80006b0:	e002      	b.n	80006b8 <SSD_u8DisplayNumber+0xd0>
		default:Local_u8ErrorState=NOK;break;/* Update Local_u8ErrorState */
 80006b2:	2301      	movs	r3, #1
 80006b4:	73bb      	strb	r3, [r7, #14]
 80006b6:	bf00      	nop

		}
		/* DISPLAY The Number on the Required SSD */
		for( Local_u8SSDCounter = SSD_START_WITH_A_PIN ; Local_u8SSDCounter <= SSD_END_WITH_G_PIN ; Local_u8SSDCounter++ )
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e01f      	b.n	80006fe <SSD_u8DisplayNumber+0x116>
		{
			/* From global arrays and SSD_Cfg we able to determinate PORT AND PIN OF SSD led  */
			GPIO_u8SetPinValue( SSD_LED_PORT[ Local_u8SSDCounter ] , SSD_LED_PINS[ Local_u8SSDCounter ] , (( SSD_NUMBER_Arr[ Copy_u8SSDNum - ONE_VALUE ][ Copy_u8Number ] >> Local_u8SSDCounter )&SSD_ADDING_WITH_0X01 ) ) ;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4a59      	ldr	r2, [pc, #356]	; (8000828 <SSD_u8DisplayNumber+0x240>)
 80006c2:	5cd0      	ldrb	r0, [r2, r3]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	4a59      	ldr	r2, [pc, #356]	; (800082c <SSD_u8DisplayNumber+0x244>)
 80006c8:	5cd4      	ldrb	r4, [r2, r3]
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	1e5a      	subs	r2, r3, #1
 80006ce:	7979      	ldrb	r1, [r7, #5]
 80006d0:	4d57      	ldr	r5, [pc, #348]	; (8000830 <SSD_u8DisplayNumber+0x248>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	442b      	add	r3, r5
 80006dc:	440b      	add	r3, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	fa42 f303 	asr.w	r3, r2, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	4621      	mov	r1, r4
 80006f4:	f7ff fe1e 	bl	8000334 <GPIO_u8SetPinValue>
		for( Local_u8SSDCounter = SSD_START_WITH_A_PIN ; Local_u8SSDCounter <= SSD_END_WITH_G_PIN ; Local_u8SSDCounter++ )
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b07      	cmp	r3, #7
 8000702:	d9dc      	bls.n	80006be <SSD_u8DisplayNumber+0xd6>
 8000704:	e086      	b.n	8000814 <SSD_u8DisplayNumber+0x22c>
		}
	}else if (Copy_u8SSDType == SSD_COMMON_ANODE)
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	2b01      	cmp	r3, #1
 800070a:	f040 8081 	bne.w	8000810 <SSD_u8DisplayNumber+0x228>
	{
		/* Enable Common of the SSD  you want to work on it */
		switch( Copy_u8SSDNum )
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d038      	beq.n	8000786 <SSD_u8DisplayNumber+0x19e>
 8000714:	2b03      	cmp	r3, #3
 8000716:	dc4f      	bgt.n	80007b8 <SSD_u8DisplayNumber+0x1d0>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d002      	beq.n	8000722 <SSD_u8DisplayNumber+0x13a>
 800071c:	2b02      	cmp	r3, #2
 800071e:	d019      	beq.n	8000754 <SSD_u8DisplayNumber+0x16c>
 8000720:	e04a      	b.n	80007b8 <SSD_u8DisplayNumber+0x1d0>
		{
		case 1 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_LOW ) ;
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4a3f      	ldr	r2, [pc, #252]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000728:	7811      	ldrb	r1, [r2, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fe01 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_HIGH ) ;
 8000732:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	4a3b      	ldr	r2, [pc, #236]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000738:	7851      	ldrb	r1, [r2, #1]
 800073a:	2201      	movs	r2, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fdf9 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_HIGH ) ;
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	4a37      	ldr	r2, [pc, #220]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 8000748:	7891      	ldrb	r1, [r2, #2]
 800074a:	2201      	movs	r2, #1
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fdf1 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 8000752:	e034      	b.n	80007be <SSD_u8DisplayNumber+0x1d6>
		case 2 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_HIGH ) ;
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4a32      	ldr	r2, [pc, #200]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 800075a:	7811      	ldrb	r1, [r2, #0]
 800075c:	2201      	movs	r2, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fde8 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_LOW ) ;
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 800076a:	7851      	ldrb	r1, [r2, #1]
 800076c:	2200      	movs	r2, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fde0 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_HIGH ) ;
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000776:	789b      	ldrb	r3, [r3, #2]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 800077a:	7891      	ldrb	r1, [r2, #2]
 800077c:	2201      	movs	r2, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fdd8 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 8000784:	e01b      	b.n	80007be <SSD_u8DisplayNumber+0x1d6>
		case 3 :
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD1] , SSD_EN_PIN[SSD1] , PIN_HIGH ) ;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4a26      	ldr	r2, [pc, #152]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 800078c:	7811      	ldrb	r1, [r2, #0]
 800078e:	2201      	movs	r2, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fdcf 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD2] , SSD_EN_PIN[SSD2] , PIN_HIGH ) ;
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	4a22      	ldr	r2, [pc, #136]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 800079c:	7851      	ldrb	r1, [r2, #1]
 800079e:	2201      	movs	r2, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fdc7 	bl	8000334 <GPIO_u8SetPinValue>
			GPIO_u8SetPinValue(SSD_EN_PORT[SSD3] , SSD_EN_PIN[SSD3] , PIN_LOW ) ;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SSD_u8DisplayNumber+0x238>)
 80007a8:	789b      	ldrb	r3, [r3, #2]
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <SSD_u8DisplayNumber+0x23c>)
 80007ac:	7891      	ldrb	r1, [r2, #2]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fdbf 	bl	8000334 <GPIO_u8SetPinValue>
			break;
 80007b6:	e002      	b.n	80007be <SSD_u8DisplayNumber+0x1d6>
		default:Local_u8ErrorState=NOK;break;/* Update Local_u8ErrorState */
 80007b8:	2301      	movs	r3, #1
 80007ba:	73bb      	strb	r3, [r7, #14]
 80007bc:	bf00      	nop

		}
		/* DISPLAY The Number on the Required SSD */
		for( Local_u8SSDCounter = SSD_START_WITH_A_PIN ; Local_u8SSDCounter <= SSD_END_WITH_G_PIN ; Local_u8SSDCounter++ )
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e021      	b.n	8000808 <SSD_u8DisplayNumber+0x220>
		{
			/* From global arrays and SSD_Cfg we able to determinate PORT AND PIN OF SSD led  */
			GPIO_u8SetPinValue( SSD_LED_PORT[ Local_u8SSDCounter ] , SSD_LED_PINS[ Local_u8SSDCounter ] , ~(( SSD_NUMBER_Arr[ Copy_u8SSDNum - ONE_VALUE ][ Copy_u8Number ] >> Local_u8SSDCounter )&SSD_ADDING_WITH_0X01 ) ) ;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <SSD_u8DisplayNumber+0x240>)
 80007c8:	5cd0      	ldrb	r0, [r2, r3]
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <SSD_u8DisplayNumber+0x244>)
 80007ce:	5cd4      	ldrb	r4, [r2, r3]
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	7979      	ldrb	r1, [r7, #5]
 80007d6:	4d16      	ldr	r5, [pc, #88]	; (8000830 <SSD_u8DisplayNumber+0x248>)
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	442b      	add	r3, r5
 80007e2:	440b      	add	r3, r1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	fa42 f303 	asr.w	r3, r2, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	4621      	mov	r1, r4
 80007fe:	f7ff fd99 	bl	8000334 <GPIO_u8SetPinValue>
		for( Local_u8SSDCounter = SSD_START_WITH_A_PIN ; Local_u8SSDCounter <= SSD_END_WITH_G_PIN ; Local_u8SSDCounter++ )
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	3301      	adds	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d9da      	bls.n	80007c4 <SSD_u8DisplayNumber+0x1dc>
 800080e:	e001      	b.n	8000814 <SSD_u8DisplayNumber+0x22c>
		}
	}else
	{
		/* Update Local_u8ErrorState */
		Local_u8ErrorState =NOK;
 8000810:	2301      	movs	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]
	}



	return Local_u8ErrorState;
 8000814:	7bbb      	ldrb	r3, [r7, #14]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bdb0      	pop	{r4, r5, r7, pc}
 800081e:	bf00      	nop
 8000820:	20000050 	.word	0x20000050
 8000824:	20000054 	.word	0x20000054
 8000828:	20000040 	.word	0x20000040
 800082c:	20000048 	.word	0x20000048
 8000830:	20000020 	.word	0x20000020

08000834 <SYSTICK_u8Delay_MS>:
 * @param[in] Copy_u32TimeIn_MS : time in MSeccy
 * retval Local_u8ErrorState
 */

uint8_t SYSTICK_u8Delay_MS(uint32_t Copy_u32TimeIn_MS)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	/* define a variable to carry error state */
	uint8_t Local_u8ErrorState=OK;
 800083c:	2300      	movs	r3, #0
 800083e:	72fb      	strb	r3, [r7, #11]

	/* define a variable to carry Local_u32NeededTicks */
	uint32_t Local_u32NeededTicks= INIT_VALUE_BY_ZERO ;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]

	/* RESET the count falg TO make sure that is initially by 0*/
	CLR_BIT(SYSTICK->SYST_CSR,COUNTFLAG);
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000852:	601a      	str	r2, [r3, #0]
	/* check on AHB frequency if the user worked on external frequency [AHB_CLK_DIVIDED_bY_8] or  system frequency [AHB_CLK] */
	if(SYSTICK_CLK_SRC == AHB_CLK_DIVIDED_bY_8)
	{

		/* clear CLKSOURCE bit to make it as external freq that's meaning that AHB CLK divided by 8 */
		CLR_BIT((SYSTICK->SYST_CSR),CLKSOURCE);
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0204 	bic.w	r2, r2, #4
 8000862:	601a      	str	r2, [r3, #0]

		/* Calculate number of ticks needed for Copy_u32TimeIn_MS */
		Local_u32NeededTicks = (Copy_u32TimeIn_MS * CONVERT_FROM_US_TO_MS);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	60fb      	str	r3, [r7, #12]


		/* clear 24 bits of reload value */
		SYSTICK->SYST_RVR &= ~(SYSTICK_MASK);
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800087e:	605a      	str	r2, [r3, #4]

		/* put the value into SYST_RVR and start count down until flag raised  */
		SYSTICK->SYST_RVR |= Local_u32NeededTicks;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6859      	ldr	r1, [r3, #4]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	430a      	orrs	r2, r1
 800088e:	605a      	str	r2, [r3, #4]

		/* Enable systick */
		SET_BIT(SYSTICK->SYST_CSR,ENABLE);
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	601a      	str	r2, [r3, #0]

		/* busy waiting by using polling method */
		while(GET_BIT(SYSTICK->SYST_CSR,COUNTFLAG) == FLAG_NOT_RAISED);
 80008a0:	bf00      	nop
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f8      	beq.n	80008a2 <SYSTICK_u8Delay_MS+0x6e>

		/* Disable systick */
		CLR_BIT(SYSTICK->SYST_CSR,ENABLE);
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SYSTICK_u8Delay_MS+0x98>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0201 	bic.w	r2, r2, #1
 80008be:	601a      	str	r2, [r3, #0]
		/* update Error state value  */
		Local_u8ErrorState=NOK;
	}

	/* return Error state value  and end the function */
	return Local_u8ErrorState;
 80008c0:	7afb      	ldrb	r3, [r7, #11]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000058 	.word	0x20000058

080008d0 <main>:

#include "RCC_Interface.h"
#include "LED_Interface.h"

int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b0a0      	sub	sp, #128	; 0x80
 80008d4:	af00      	add	r7, sp, #0
	uint8_t Local_u8RedLedCounter=INIT_VALUE_BY_ZERO;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t Local_u8YelLedCounter=INIT_VALUE_BY_ZERO;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t Local_u8GrnLedCounter=INIT_VALUE_BY_ZERO;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d


	/* enable rcc on the peripheral GPIOA GPIOB */
	RCC_voidAPB_2_EnableClk(IOPA_EN);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f7ff fdd5 	bl	8000498 <RCC_voidAPB_2_EnableClk>
	RCC_voidAPB_2_EnableClk(IOPB_EN);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f7ff fdd2 	bl	8000498 <RCC_voidAPB_2_EnableClk>
	RCC_voidAPB_2_EnableClk(IOPC_EN);
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff fdcf 	bl	8000498 <RCC_voidAPB_2_EnableClk>

	/* prepare PinConfiguration struct for every SSD'Pins */
	PinConfig_t PinA11 = {.Port = PORTA,.PinNum =PIN11 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 80008fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	711a      	strb	r2, [r3, #4]
 8000904:	230b      	movs	r3, #11
 8000906:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 800090a:	2302      	movs	r3, #2
 800090c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	PinConfig_t PinA8  = {.Port = PORTA,.PinNum =PIN8  , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000910:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	711a      	strb	r2, [r3, #4]
 800091a:	2308      	movs	r3, #8
 800091c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8000920:	2302      	movs	r3, #2
 8000922:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	PinConfig_t PinB15 = {.Port = PORTB,.PinNum =PIN15 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000926:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	711a      	strb	r2, [r3, #4]
 8000930:	2301      	movs	r3, #1
 8000932:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8000936:	230f      	movs	r3, #15
 8000938:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 800093c:	2302      	movs	r3, #2
 800093e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	PinConfig_t PinB14 = {.Port = PORTB,.PinNum =PIN14 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000942:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	711a      	strb	r2, [r3, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8000952:	230e      	movs	r3, #14
 8000954:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8000958:	2302      	movs	r3, #2
 800095a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	PinConfig_t PinB13 = {.Port = PORTB,.PinNum =PIN13 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 800095e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	711a      	strb	r2, [r3, #4]
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800096e:	230d      	movs	r3, #13
 8000970:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8000974:	2302      	movs	r3, #2
 8000976:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	PinConfig_t PinB12 = {.Port = PORTB,.PinNum =PIN12 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 800097a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	711a      	strb	r2, [r3, #4]
 8000984:	2301      	movs	r3, #1
 8000986:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800098a:	230c      	movs	r3, #12
 800098c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8000990:	2302      	movs	r3, #2
 8000992:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	PinConfig_t PinA12 = {.Port = PORTA,.PinNum =PIN12 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	711a      	strb	r2, [r3, #4]
 80009a0:	230c      	movs	r3, #12
 80009a2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80009a6:	2302      	movs	r3, #2
 80009a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	PinConfig_t PinA15 = {.Port = PORTA,.PinNum =PIN15 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 80009ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	711a      	strb	r2, [r3, #4]
 80009b6:	230f      	movs	r3, #15
 80009b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80009bc:	2302      	movs	r3, #2
 80009be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	PinConfig_t PinB8  = {.Port = PORTB,.PinNum =PIN8 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	711a      	strb	r2, [r3, #4]
 80009cc:	2301      	movs	r3, #1
 80009ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80009d2:	2308      	movs	r3, #8
 80009d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80009d8:	2302      	movs	r3, #2
 80009da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	PinConfig_t PinB9  = {.Port = PORTB,.PinNum =PIN9 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 80009de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	711a      	strb	r2, [r3, #4]
 80009e8:	2301      	movs	r3, #1
 80009ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80009ee:	2309      	movs	r3, #9
 80009f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80009f4:	2302      	movs	r3, #2
 80009f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	PinConfig_t PinB3  = {.Port = PORTB,.PinNum =PIN3 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 80009fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	711a      	strb	r2, [r3, #4]
 8000a04:	2301      	movs	r3, #1
 8000a06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000a10:	2302      	movs	r3, #2
 8000a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	LED_Struct LEDYel= {.LED_u8ConnectionType = SOURCE_CONNECTION , .LED_u8PORT=PORTC , .LED_u8PIN = PIN13};
 8000a16:	4a77      	ldr	r2, [pc, #476]	; (8000bf4 <main+0x324>)
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	8019      	strh	r1, [r3, #0]
 8000a22:	3302      	adds	r3, #2
 8000a24:	0c12      	lsrs	r2, r2, #16
 8000a26:	701a      	strb	r2, [r3, #0]
	LED_Struct LEDGre= {.LED_u8ConnectionType = SOURCE_CONNECTION , .LED_u8PORT=PORTC , .LED_u8PIN = PIN15};
 8000a28:	4a73      	ldr	r2, [pc, #460]	; (8000bf8 <main+0x328>)
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	6812      	ldr	r2, [r2, #0]
 8000a30:	4611      	mov	r1, r2
 8000a32:	8019      	strh	r1, [r3, #0]
 8000a34:	3302      	adds	r3, #2
 8000a36:	0c12      	lsrs	r2, r2, #16
 8000a38:	701a      	strb	r2, [r3, #0]
	LED_Struct LEDRed1= {.LED_u8ConnectionType = SOURCE_CONNECTION , .LED_u8PORT=PORTA , .LED_u8PIN = PIN2};
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	773b      	strb	r3, [r7, #28]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	777b      	strb	r3, [r7, #29]
 8000a42:	2302      	movs	r3, #2
 8000a44:	77bb      	strb	r3, [r7, #30]

	PinConfig_t PinC13 = {.Port = PORTC,.PinNum =PIN13 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	711a      	strb	r2, [r3, #4]
 8000a50:	2302      	movs	r3, #2
 8000a52:	753b      	strb	r3, [r7, #20]
 8000a54:	230d      	movs	r3, #13
 8000a56:	757b      	strb	r3, [r7, #21]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	75bb      	strb	r3, [r7, #22]
	PinConfig_t PinA2 = {.Port = PORTA,.PinNum =PIN2 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	711a      	strb	r2, [r3, #4]
 8000a66:	2302      	movs	r3, #2
 8000a68:	737b      	strb	r3, [r7, #13]
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	73bb      	strb	r3, [r7, #14]
	PinConfig_t PinC15 = {.Port = PORTC,.PinNum =PIN15 , .Mode = OUTPUT_MAXSPEED_2MHZ ,.CNF_OutputMode=PUSH_PULL};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	711a      	strb	r2, [r3, #4]
 8000a76:	2302      	movs	r3, #2
 8000a78:	713b      	strb	r3, [r7, #4]
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	717b      	strb	r3, [r7, #5]
 8000a7e:	2302      	movs	r3, #2
 8000a80:	71bb      	strb	r3, [r7, #6]


	/* CALL the function of SSD_voidPinInit */
	SSD_u8PinInit(&PinA11);
 8000a82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd1e 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinA8 );
 8000a8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd19 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB15);
 8000a96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd14 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB14);
 8000aa0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd0f 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB13);
 8000aaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd0a 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB12);
 8000ab4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fd05 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinA12);
 8000abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd00 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinA15);
 8000ac8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fcfb 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB8);
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fcf6 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB9);
 8000adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fcf1 	bl	80004c8 <SSD_u8PinInit>
	SSD_u8PinInit(&PinB3);
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fcec 	bl	80004c8 <SSD_u8PinInit>


	/* CALL the function of LED_voidPinInit */
	LED_u8PinInit(&PinC13);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc61 	bl	80003bc <LED_u8PinInit>
	LED_u8PinInit(&PinA2);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc5c 	bl	80003bc <LED_u8PinInit>
	LED_u8PinInit(&PinC15);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fc58 	bl	80003bc <LED_u8PinInit>

	/* Loop forever */
	for(;;)
	{

		SSD_u8DisplayOFF(2,SSD_COMMON_CATHODE);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fd2c 	bl	800056c <SSD_u8DisplayOFF>
		SSD_u8DisplayOFF(1,SSD_COMMON_CATHODE);
 8000b14:	2102      	movs	r1, #2
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff fd28 	bl	800056c <SSD_u8DisplayOFF>

		for(Local_u8RedLedCounter=INIT_VALUE_BY_ONE;Local_u8RedLedCounter<10;Local_u8RedLedCounter++)
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000b22:	e018      	b.n	8000b56 <main+0x286>
		{
			LED_u8LedTurnON(&LEDRed1);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fc5b 	bl	80003e4 <LED_u8LedTurnON>
			SSD_u8DisplayOn(1, SSD_COMMON_CATHODE);
 8000b2e:	2102      	movs	r1, #2
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fcdd 	bl	80004f0 <SSD_u8DisplayOn>
			SSD_u8DisplayNumber(1, SSD_COMMON_CATHODE, Local_u8RedLedCounter);
 8000b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fd52 	bl	80005e8 <SSD_u8DisplayNumber>
			SYSTICK_u8Delay_MS(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b48:	f7ff fe74 	bl	8000834 <SYSTICK_u8Delay_MS>
		for(Local_u8RedLedCounter=INIT_VALUE_BY_ONE;Local_u8RedLedCounter<10;Local_u8RedLedCounter++)
 8000b4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b50:	3301      	adds	r3, #1
 8000b52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000b56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	d9e2      	bls.n	8000b24 <main+0x254>
		}



		for(Local_u8YelLedCounter=INIT_VALUE_BY_ONE;Local_u8YelLedCounter<4;Local_u8YelLedCounter++)
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000b64:	e019      	b.n	8000b9a <main+0x2ca>
		{
			LED_u8LedTurnOff(&LEDRed1);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc67 	bl	800043e <LED_u8LedTurnOff>
			LED_u8LedTurnON(&LEDYel);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc35 	bl	80003e4 <LED_u8LedTurnON>

			SSD_u8DisplayNumber(1, SSD_COMMON_CATHODE, Local_u8YelLedCounter);
 8000b7a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2102      	movs	r1, #2
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fd30 	bl	80005e8 <SSD_u8DisplayNumber>
			SYSTICK_u8Delay_MS(1000);
 8000b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8c:	f7ff fe52 	bl	8000834 <SYSTICK_u8Delay_MS>
		for(Local_u8YelLedCounter=INIT_VALUE_BY_ONE;Local_u8YelLedCounter<4;Local_u8YelLedCounter++)
 8000b90:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b94:	3301      	adds	r3, #1
 8000b96:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000b9a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d9e1      	bls.n	8000b66 <main+0x296>

		}

		for(Local_u8GrnLedCounter=INIT_VALUE_BY_ONE;Local_u8GrnLedCounter<10;Local_u8GrnLedCounter++)
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000ba8:	e01e      	b.n	8000be8 <main+0x318>
		{
			LED_u8LedTurnOff(&LEDRed1);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc45 	bl	800043e <LED_u8LedTurnOff>
			LED_u8LedTurnOff(&LEDYel);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fc40 	bl	800043e <LED_u8LedTurnOff>
			LED_u8LedTurnON(&LEDGre);
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc0e 	bl	80003e4 <LED_u8LedTurnON>

			SSD_u8DisplayNumber(1, SSD_COMMON_CATHODE, Local_u8GrnLedCounter);
 8000bc8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2102      	movs	r1, #2
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fd09 	bl	80005e8 <SSD_u8DisplayNumber>
			SYSTICK_u8Delay_MS(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f7ff fe2b 	bl	8000834 <SYSTICK_u8Delay_MS>
		for(Local_u8GrnLedCounter=INIT_VALUE_BY_ONE;Local_u8GrnLedCounter<10;Local_u8GrnLedCounter++)
 8000bde:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000be2:	3301      	adds	r3, #1
 8000be4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000be8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000bec:	2b09      	cmp	r3, #9
 8000bee:	d9dc      	bls.n	8000baa <main+0x2da>
		SSD_u8DisplayOFF(2,SSD_COMMON_CATHODE);
 8000bf0:	e78c      	b.n	8000b0c <main+0x23c>
 8000bf2:	bf00      	nop
 8000bf4:	08000cb0 	.word	0x08000cb0
 8000bf8:	08000cb4 	.word	0x08000cb4

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff fe4f 	bl	80008d0 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c40:	08000cc0 	.word	0x08000cc0
  ldr r2, =_sbss
 8000c44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c48:	20000078 	.word	0x20000078

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2600      	movs	r6, #0
 8000c54:	4d0c      	ldr	r5, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f81a 	bl	8000c98 <_init>
 8000c64:	2600      	movs	r6, #0
 8000c66:	4d0a      	ldr	r5, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb8 	.word	0x08000cb8
 8000c8c:	08000cb8 	.word	0x08000cb8
 8000c90:	08000cb8 	.word	0x08000cb8
 8000c94:	08000cbc 	.word	0x08000cbc

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
